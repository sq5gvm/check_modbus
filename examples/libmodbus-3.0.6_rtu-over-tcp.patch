--- libmodbus-3.0.6-orig/src/modbus-rtu-private.h	2014-04-02 23:34:00.000000000 +0200
+++ libmodbus-3.0.6/src/modbus-rtu-private.h	2014-07-27 13:59:15.887186482 +0200
@@ -31,11 +31,9 @@
 #include <termios.h>
 #endif
 
-#define _MODBUS_RTU_HEADER_LENGTH      1
 #define _MODBUS_RTU_PRESET_REQ_LENGTH  6
 #define _MODBUS_RTU_PRESET_RSP_LENGTH  2
 
-#define _MODBUS_RTU_CHECKSUM_LENGTH    2
 
 #if defined(_WIN32)
 #define ENOTSUP WSAEOPNOTSUPP
--- libmodbus-3.0.6-orig/src/modbus-rtu.c	2014-04-02 23:34:00.000000000 +0200
+++ libmodbus-3.0.6/src/modbus-rtu.c	2014-07-27 13:59:15.887186482 +0200
@@ -112,7 +112,7 @@
 }
 
 /* Builds a RTU request header */
-static int _modbus_rtu_build_request_basis(modbus_t *ctx, int function,
+int _modbus_rtu_build_request_basis(modbus_t *ctx, int function,
                                            int addr, int nb,
                                            uint8_t *req)
 {
@@ -128,7 +128,7 @@
 }
 
 /* Builds a RTU response header */
-static int _modbus_rtu_build_response_basis(sft_t *sft, uint8_t *rsp)
+int _modbus_rtu_build_response_basis(sft_t *sft, uint8_t *rsp)
 {
     /* In this case, the slave is certainly valid because a check is already
      * done in _modbus_rtu_listen */
@@ -138,7 +138,7 @@
     return _MODBUS_RTU_PRESET_RSP_LENGTH;
 }
 
-static uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
+uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
 {
     uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
     uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
--- libmodbus-3.0.6-orig/src/modbus-rtu.h	2014-04-02 23:34:00.000000000 +0200
+++ libmodbus-3.0.6/src/modbus-rtu.h	2014-07-27 13:59:15.887186482 +0200
@@ -26,7 +26,6 @@
 /* Modbus_Application_Protocol_V1_1b.pdf Chapter 4 Section 1 Page 5
  * RS232 / RS485 ADU = 253 bytes + slave (1 byte) + CRC (2 bytes) = 256 bytes
  */
-#define MODBUS_RTU_MAX_ADU_LENGTH  256
 
 modbus_t* modbus_new_rtu(const char *device, int baud, char parity,
                          int data_bit, int stop_bit);
--- libmodbus-3.0.6-orig/src/modbus-tcp.c	2014-04-02 23:34:00.000000000 +0200
+++ libmodbus-3.0.6/src/modbus-tcp.c	2014-07-27 13:59:15.887186482 +0200
@@ -611,6 +611,64 @@
     _modbus_tcp_filter_request
 };
 
+int _modbus_rtu_build_request_basis(modbus_t *ctx, int function,
+                                           int addr, int nb,
+                                           uint8_t *req);
+int _modbus_rtu_build_response_basis(sft_t *sft, uint8_t *rsp);
+int _modbus_rtu_prepare_response_tid(const uint8_t *req, int *req_length);
+int _modbus_rtu_send_msg_pre(uint8_t *req, int req_length);
+int _modbus_rtu_check_integrity(modbus_t *ctx, uint8_t *msg,
+                                const int msg_length);
+int _modbus_rtu_filter_request(modbus_t *ctx, int slave);
+uint16_t crc16(uint8_t *buffer, uint16_t buffer_length);
+
+/* The check_crc16 function shall return the message length if the CRC is
+   valid. Otherwise it shall return -1 and set errno to EMBADCRC. */
+int _modbus_rtutcp_check_integrity(modbus_t *ctx, uint8_t *msg,
+                                const int msg_length)
+{
+    uint16_t crc_calculated;
+    uint16_t crc_received;
+
+    crc_calculated = crc16(msg, msg_length - 2);
+    crc_received = (msg[msg_length - 2] << 8) | msg[msg_length - 1];
+
+    /* Check CRC of msg */
+    if (crc_calculated == crc_received) {
+        return msg_length;
+    } else {
+        if (ctx->debug) {
+            fprintf(stderr, "ERROR CRC received %0X != CRC calculated %0X\n",
+                    crc_received, crc_calculated);
+        }
+        if (ctx->error_recovery & MODBUS_ERROR_RECOVERY_PROTOCOL) {
+            _modbus_tcp_flush(ctx);
+        }
+        errno = EMBBADCRC;
+        return -1;
+    }
+}
+
+const modbus_backend_t _modbus_rtutcp_backend = {
+    _MODBUS_BACKEND_TYPE_TCP,
+    _MODBUS_RTU_HEADER_LENGTH,
+    _MODBUS_RTU_CHECKSUM_LENGTH,
+    MODBUS_RTU_MAX_ADU_LENGTH,
+    _modbus_set_slave,
+    _modbus_rtu_build_request_basis,
+    _modbus_rtu_build_response_basis,
+    _modbus_rtu_prepare_response_tid,
+    _modbus_rtu_send_msg_pre,
+    _modbus_tcp_send,
+    _modbus_tcp_recv,
+    _modbus_rtu_check_integrity,
+    NULL,
+    _modbus_tcp_connect,
+    _modbus_tcp_close,
+    _modbus_tcp_flush,
+    _modbus_tcp_select,
+    _modbus_rtu_filter_request
+};
 
 const modbus_backend_t _modbus_tcp_pi_backend = {
     _MODBUS_BACKEND_TYPE_TCP,
@@ -685,6 +743,57 @@
     return ctx;
 }
 
+modbus_t* modbus_new_rtutcp(const char *ip, int port)
+{
+    modbus_t *ctx;
+    modbus_tcp_t *ctx_tcp;
+    size_t dest_size;
+    size_t ret_size;
+
+#if defined(OS_BSD)
+    /* MSG_NOSIGNAL is unsupported on *BSD so we install an ignore
+       handler for SIGPIPE. */
+    struct sigaction sa;
+
+    sa.sa_handler = SIG_IGN;
+    if (sigaction(SIGPIPE, &sa, NULL) < 0) {
+        /* The debug flag can't be set here... */
+        fprintf(stderr, "Coud not install SIGPIPE handler.\n");
+        return NULL;
+    }
+#endif
+
+    ctx = (modbus_t *) malloc(sizeof(modbus_t));
+    _modbus_init_common(ctx);
+
+    /* Could be changed after to reach a remote serial Modbus device */
+    ctx->slave = MODBUS_TCP_SLAVE;
+
+    ctx->backend = &(_modbus_rtutcp_backend);
+
+    ctx->backend_data = (modbus_tcp_t *) malloc(sizeof(modbus_tcp_t));
+    ctx_tcp = (modbus_tcp_t *)ctx->backend_data;
+
+    dest_size = sizeof(char) * 16;
+    ret_size = strlcpy(ctx_tcp->ip, ip, dest_size);
+    if (ret_size == 0) {
+        fprintf(stderr, "The IP string is empty\n");
+        modbus_free(ctx);
+        errno = EINVAL;
+        return NULL;
+    }
+
+    if (ret_size >= dest_size) {
+        fprintf(stderr, "The IP string has been truncated\n");
+        modbus_free(ctx);
+        errno = EINVAL;
+        return NULL;
+    }
+
+    ctx_tcp->port = port;
+
+    return ctx;
+}
 
 modbus_t* modbus_new_tcp_pi(const char *node, const char *service)
 {
--- libmodbus-3.0.6-orig/src/modbus-tcp.h	2014-04-02 23:34:00.000000000 +0200
+++ libmodbus-3.0.6/src/modbus-tcp.h	2014-07-27 13:59:15.887186482 +0200
@@ -41,6 +41,7 @@
 #define MODBUS_TCP_MAX_ADU_LENGTH  260
 
 modbus_t* modbus_new_tcp(const char *ip_address, int port);
+modbus_t* modbus_new_rtutcp(const char *ip, int port);
 int modbus_tcp_listen(modbus_t *ctx, int nb_connection);
 int modbus_tcp_accept(modbus_t *ctx, int *socket);
 
--- libmodbus-3.0.6-orig/src/modbus.h	2014-04-02 23:34:00.000000000 +0200
+++ libmodbus-3.0.6/src/modbus.h	2014-07-27 13:59:15.887186482 +0200
@@ -84,6 +84,10 @@
 /* Random number to avoid errno conflicts */
 #define MODBUS_ENOBASE 112345678
 
+#define MODBUS_RTU_MAX_ADU_LENGTH  256
+#define _MODBUS_RTU_CHECKSUM_LENGTH    2
+#define _MODBUS_RTU_HEADER_LENGTH      1
+
 /* Protocol exceptions */
 enum {
     MODBUS_EXCEPTION_ILLEGAL_FUNCTION = 0x01,
